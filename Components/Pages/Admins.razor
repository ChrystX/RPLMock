@page "/admin"
@inject IJSRuntime JS

<h3>Admin Management</h3>

<!-- Admin Registration Form -->
<div class="admin-form">
    <h4>Register New Admin</h4>
    <EditForm Model="newAdmin" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="adminName">Name:</label>
            <InputText id="adminName" class="form-control" @bind-Value="newAdmin.Name" />
        </div>

        <div class="form-group">
            <label for="adminEmail">Email:</label>
            <InputText id="adminEmail" class="form-control" @bind-Value="newAdmin.Email" />
        </div>

        <div class="form-group">
            <label for="adminPassword">Password:</label>
            <InputText id="adminPassword" type="password" class="form-control" @bind-Value="newAdmin.Password" />
        </div>

        <div class="form-group">
            <label for="adminRole">Role:</label>
            <InputSelect id="adminRole" class="form-control" @bind-Value="newAdmin.Role">
                <option value="Super Admin">Super Admin</option>
                <option value="Admin Bank">Admin Bank</option>
                <option value="Admin Payroll">Admin Payroll</option>
            </InputSelect>
        </div>

        <button type="submit" class="btn btn-primary">Register Admin</button>
    </EditForm>
</div>

<hr />

<!-- Admin Data Table -->
<h4>Admin List</h4>
<table class="table table-striped">
    <thead>
        <tr>
            <th>Name</th>
            <th>Email</th>
            <th>Role</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var admin in admins)
        {
            <tr>
                <td>@admin.Name</td>
                <td>@admin.Email</td>
                <td>@admin.Role</td>
                <td>
                    <button class="btn btn-warning btn-sm" @onclick="() => EditAdmin(admin)">Edit</button>
                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteAdmin(admin)">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    public class Admin
    {
        public string Name { get; set; }
        public string Email { get; set; }
        public string Password { get; set; }
        public string Role { get; set; }
    }

    private Admin newAdmin = new Admin();
    private List<Admin> admins = new List<Admin>();

    // Handles form submission to register a new admin
    private void HandleSubmit()
    {
        // You can add logic to handle saving the new admin data, for example calling an API
        admins.Add(newAdmin);
        newAdmin = new Admin(); // Reset the form
    }

    // Edit admin logic
    private void EditAdmin(Admin admin)
    {
        // Add logic to edit admin data, you can load the admin data into the form and update the data
        newAdmin = admin; // Prepopulate form with the admin's info
    }

    // Delete admin logic
    private void DeleteAdmin(Admin admin)
    {
        admins.Remove(admin);
    }
}
